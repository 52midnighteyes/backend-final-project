generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String            @id @unique @default(uuid())
  first_name         String
  last_name          String
  email              String            @unique
  password           String?
  role               User_Role         @default(USER)
  avatar             String?
  isVerified         Boolean           @default(false)
  login_attempt      Int               @default(0)
  login_time_out     DateTime?
  is_suspended       Boolean           @default(false)
  suspended_cooldown DateTime?
  created_at         DateTime          @default(now())
  deleted_at         DateTime?
  phone_number       Int?
  is_external_login  Boolean?          @default(false)
  properties         Property[]
  replies            Reply[]
  reservations       Reservation[]
  temporary_tokens   Temporary_Token[]
  transactions       Transaction[]

  @@map("Users")
}

model Property {
  id           String             @id @unique @default(uuid())
  name         String
  city_id      String
  description  String
  category_id  String
  slug         String             @unique
  deleted_at   DateTime?
  user_id      String
  add_ons      Add_On[]
  category     Category           @relation(fields: [category_id], references: [id])
  city         City               @relation(fields: [city_id], references: [id])
  user         User               @relation(fields: [user_id], references: [id])
  pictures     Property_Picture[]
  room_types   Room_Type[]
  transactions Transaction[]

  @@map("Properties")
}

model Property_Picture {
  id          String   @id @default(uuid())
  url         String   @unique
  property_id String
  property    Property @relation(fields: [property_id], references: [id])

  @@map("Property_Pictures")
}

model Reservation {
  id             String      @id @unique @default(uuid())
  user_id        String
  transaction_id String      @unique
  is_checkin     Boolean     @default(false)
  is_checkout    Boolean     @default(false)
  created_at     DateTime    @default(now())
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  user           User        @relation(fields: [user_id], references: [id])
  review         Review?

  @@map("Reservations")
}

model Transaction {
  id                  String              @id @unique @default(uuid())
  user_id             String
  amount              Decimal
  payment_proof       String?
  status              Transaction_Status
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime            @default(now())
  expired_at          DateTime?
  room_type_id        String
  special_request     String?
  property_id         String
  reservation         Reservation?
  transaction_add_ons Transaction_AddOn[]
  property            Property            @relation(fields: [property_id], references: [id])
  room_type           Room_Type           @relation(fields: [room_type_id], references: [id])
  user                User                @relation(fields: [user_id], references: [id])

  @@index([room_type_id])
  @@index([status])
  @@index([expired_at])
  @@index([start_date])
  @@index([end_date])
  @@map("Transactions")
}

model Transaction_AddOn {
  id             String      @id @default(uuid())
  transaction_id String
  add_on_id      String
  unit_price     Decimal
  created_at     DateTime    @default(now())
  add_on         Add_On      @relation(fields: [add_on_id], references: [id])
  transaction    Transaction @relation(fields: [transaction_id], references: [id])

  @@unique([transaction_id, add_on_id])
  @@map("Transaction_AddOns")
}

model Pricing {
  id           String       @id @default(uuid())
  value        Decimal
  is_rentable  Boolean      @default(true)
  start_date   DateTime
  end_date     DateTime
  created_at   DateTime     @default(now())
  room_type_id String
  type         Pricing_type
  room_type    Room_Type    @relation(fields: [room_type_id], references: [id])

  @@map("Pricings")
}

model Review {
  id             String      @id @default(uuid())
  reservation_id String      @unique
  rating         Int
  notes          String
  replies        Reply[]
  reservation    Reservation @relation(fields: [reservation_id], references: [id])

  @@map("Reviews")
}

model Reply {
  id        String @id @default(uuid())
  user_id   String
  review_id String
  notes     String
  review    Review @relation(fields: [review_id], references: [id])
  user      User   @relation(fields: [user_id], references: [id])

  @@map("Replies")
}

model Bed_Type {
  id         String      @id @default(uuid())
  name       String
  room_types Room_Type[]

  @@map("Bed_Types")
}

model Room_Type {
  id                 String               @id @unique @default(uuid())
  name               String
  description        String
  capacity           Int
  base_price         Int
  size               Decimal
  bed_type_id        String
  property_id        String
  total_rooms        Int
  availabilities     Availability_Daily[]
  pricings           Pricing[]
  facilities         Room_Type_Facility[]
  room_type_pictures Room_Type_Picture[]
  bed_type           Bed_Type             @relation(fields: [bed_type_id], references: [id])
  property           Property             @relation(fields: [property_id], references: [id])
  transactions       Transaction[]

  @@map("Room_Types")
}

model Add_On {
  id                  String              @id @default(uuid())
  property_id         String
  name                String
  description         String
  price               Decimal
  property            Property            @relation(fields: [property_id], references: [id])
  transaction_add_ons Transaction_AddOn[]

  @@map("Add_Ons")
}

model Room_Type_Picture {
  id           String    @id @default(uuid())
  url          String
  description  String
  room_type_id String
  room_type    Room_Type @relation(fields: [room_type_id], references: [id])
}

model Room_Type_Facility {
  room_type_id     String
  room_facility_id String
  room_facility    Room_Facility @relation(fields: [room_facility_id], references: [id])
  room_type        Room_Type     @relation(fields: [room_type_id], references: [id])

  @@id([room_type_id, room_facility_id])
}

model Room_Facility {
  id          String               @id @default(uuid())
  name        String
  description String
  room_types  Room_Type_Facility[]

  @@map("Room_Facilities")
}

model Category {
  id          String     @id @unique @default(uuid())
  name        String
  description String
  properties  Property[]

  @@map("Categories")
}

model Country {
  id        String     @id @default(uuid())
  name      String
  code      String     @unique
  provinces Province[]

  @@map("Countries")
}

model Province {
  id         String  @id @default(uuid())
  name       String
  country_id String
  cities     City[]
  country    Country @relation(fields: [country_id], references: [id])

  @@map("Provinces")
}

model City {
  id          String     @id @default(uuid())
  name        String
  province_id String
  province    Province   @relation(fields: [province_id], references: [id])
  properties  Property[]

  @@map("Cities")
}

model Temporary_Token {
  id         String               @id @default(uuid())
  token      String               @unique
  user_id    String
  expired_at DateTime
  type       Temporary_Token_Type
  user       User                 @relation(fields: [user_id], references: [id])

  @@map("Temporary_Tokens")
}

model Availability_Daily {
  room_type_id String
  date         DateTime
  total_rooms  Int
  held_count   Int       @default(0)
  booked_count Int       @default(0)
  updated_at   DateTime  @updatedAt
  room_type    Room_Type @relation(fields: [room_type_id], references: [id])

  @@id([room_type_id, date])
  @@index([date])
  @@map("Availability_Daily")
}

enum User_Role {
  USER
  TENANT
  ADMIN
}

enum Transaction_Status {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  CANCELED
  EXPIRED
  ON_GOING
  PAYMENT_PROOF_REJECTED
}

enum Pricing_type {
  NOMINAL
  PERCENTAGE
}

enum Temporary_Token_Type {
  RESET_PASSWORD
  RESET_EMAIL
  FORGOT_PASSWORD
  REGISTRATION
}
